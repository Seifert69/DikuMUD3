LEX		= flex
YACC		= bison
YFLAGS		= -y -d -v
LDLIBS		= -lfl
#sysport flags
SYSPORT =  -DLINUX -DPOSIX  -DDMSERVER # -DMUD_DEBUG -DMEMORY_DEBUG

#system flags
SYSFLAGS = -m64
SYSFLAGS += -std=c++11
#SYSFLAGS += -O6 

#debug flags
DEBUG = -g -Wall

#libs to link in. LCRYPT allows specification of `make LCRYPT=''` for OS X.
LCRYPT = -lcrypt
LDLIBS = $(LCRYPT) -lpthread -lboost_filesystem  -lboost_regex -lboost_system 

#include flags
MPLEX_INC := -I mplex2/

# output target
VME_TARGET := vme
MPLEX_TARGET := mplex
PP_TARGET := pp
VMC_TARGET := vmc
DC_TARGET := defcomp

#output binary and bin dir
VME_BIN_DIR = ../bin/$(VME_TARGET)
MPLEX_BIN_DIR = ../bin/$(MPLEX_TARGET)
DC_BIN_DIR = ../bin/$(DC_TARGET)
PP_BIN_DIR = ../bin/$(PP_TARGET)
VMC_BIN_DIR = ../bin/$(VMC_TARGET)

# source files
VME_SRCS := \
 $(wildcard ./*.cpp)

MPLEX_SRCS := \
 $(wildcard ./mplex2/*.cpp) \
hook.cpp queue.cpp textutil.cpp utility.cpp common.cpp protocol.cpp color.cpp bytestring.cpp membug.cpp

DC_SRCS := \
 $(wildcard ./defcomp/*.cpp) 
 
 PP_SRCS := \
 $(wildcard ./pp/*.cpp) 

 VMC_SRCS := \
 $(wildcard ./vmc/*.cpp) \
 $(wildcard ./pp/pp*.cpp) \
 ../db_file.cpp ../destruct.cpp

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(VME_BIN_DIR)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(VME_TARGET).tar.gz

# intermediate directory for generated object files
VME_OBJ_DIR := ../build
MPLEX_OBJ_DIR := ../build
DC_OBJ_DIR := ../build
PP_OBJ_DIR := ../build
VMC_OBJ_DIR := ../build

# intermediate directory for generated dependency files
VME_DEP_DIR := ../build
MPLEX_DEP_DIR := ../build
DC_DEP_DIR := ../build
PP_DEP_DIR := ../build
VMC_DEP_DIR := ../build
                 
# object files, auto generated from source files
VME_OBJS := $(patsubst %,$(VME_OBJ_DIR)/%.o,$(basename $(VME_SRCS)))
MPLEX_OBJS := $(patsubst %,$(MPLEX_OBJ_DIR)/%.o,$(basename $(MPLEX_SRCS)))
DC_OBJS := $(patsubst %,$(DC_OBJ_DIR)/%.o,$(basename $(DC_SRCS)))
PP_OBJS := $(patsubst %,$(PP_OBJ_DIR)/%.o,$(basename $(PP_SRCS)))
VMC_OBJS := $(patsubst %,$(VMC_OBJ_DIR)/%.o,$(basename $(VMC_SRCS)))

# dependency files, auto generated from source files
VME_DEPS := $(patsubst %,$(VME_DEP_DIR)/%.d,$(basename $(VME_SRCS)))
MPLEX_DEPS := $(patsubst %,$(MPLEX_DEP_DIR)/%.d,$(basename $(MPLEX_SRCS)))
DC_DEPS := $(patsubst %,$(DC_DEP_DIR)/%.d,$(basename $(DC_SRCS)))
PP_DEPS := $(patsubst %,$(PP_DEP_DIR)/%.d,$(basename $(PP_SRCS)))
VMC_DEPS := $(patsubst %,$(VMC_DEP_DIR)/%.d,$(basename $(VMC_SRCS)))


# gcc don't create the subdirectories automatically
$(shell mkdir -p $(dir $(VME_OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(VME_DEPS)) >/dev/null)
$(shell mkdir -p $(dir $(MPLEX_OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(MPLEX_DEPS)) >/dev/null)
$(shell mkdir -p $(dir $(DC_OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DC_DEPS)) >/dev/null)
$(shell mkdir -p $(dir $(PP_OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(PP_DEPS)) >/dev/null)
$(shell mkdir -p $(dir $(VMC_OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(VMC_DEPS)) >/dev/null)


# C++ compiler
CXX := g++ 

# linker
LD := g++

# tar
TAR := tar

# C++ flags
CXXFLAGS := $(MPLEX_INC) $(DEBUG) $(SYSPORT) $(SYSFLAGS)
 

# linker flags
LDFLAGS := -pipe -m64

# flags required for dependency generation; passed to compilers
VME_DEPFLAGS = -MT $@ -MD -MP -MF $(VME_DEP_DIR)/$*.Td
MPLEX_DEPFLAGS = -MT $@ -MD -MP -MF $(MPLEX_DEP_DIR)/$*.Td
DC_DEPFLAGS = -MT $@ -MD -MP -MF $(DC_DEP_DIR)/$*.Td
PP_DEPFLAGS = -MT $@ -MD -MP -MF $(PP_DEP_DIR)/$*.Td
VMC_DEPFLAGS = -MT $@ -MD -MP -MF $(VMC_DEP_DIR)/$*.Td

# compile C++ source files
VME_COMPILE.cc = $(CXX) $(VME_DEPFLAGS) $(CXXFLAGS)  -c -o $@
MPLEX_COMPILE.cc = $(CXX)  $(MPLEX_DEPFLAGS)   $(CXXFLAGS)   -c -o $@
DC_COMPILE.cc = $(CXX)  -I .  -I ./defcomp $(DC_DEPFLAGS) $(CXXFLAGS)  -c -o $@
PP_COMPILE.cc = $(CXX)  -I .  -I ./pp $(PP_DEPFLAGS) $(CXXFLAGS)  -c -o $@
VMC_COMPILE.cc = $(CXX)  -I .  -I ./pp $(VMC_DEPFLAGS) $(CXXFLAGS)  -c -o $@

# link object files to binary
LINK.o = $(LD) $(LDFLAGS) -o $@ 

# precompile step
VME_PRECOMPILE =
MPLEX_PRECOMPILE =
DC_PRECOMPILE =
PP_PRECOMPILE =
VMC_PRECOMPILE =

# postcompile step
VME_POST_COMPILE = @mv -f $(VME_DEP_DIR)/$*.Td $(VME_DEP_DIR)/$*.d 
MPLEX_POST_COMPILE = @mv -f $(MPLEX_DEP_DIR)/$*.Td $(MPLEX_DEP_DIR)/$*.d 
DC_POST_COMPILE = @mv -f $(DC_DEP_DIR)/$*.Td $(DC_DEP_DIR)/$*.d 
PP_POST_COMPILE = @mv -f $(PP_DEP_DIR)/$*.Td $(PP_DEP_DIR)/$*.d 
VMC_POST_COMPILE = @mv -f $(VMC_DEP_DIR)/$*.Td $(VMC_DEP_DIR)/$*.d 

$(VME_TARGET): $(VME_BIN_DIR)

$(MPLEX_TARGET): $(MPLEX_BIN_DIR)

$(DC_TARGET): $(DC_BIN_DIR)

$(PP_TARGET): $(PP_BIN_DIR)
              $(VMC_TARGET): $(VMC_BIN_DIR)
			  
all: \
 $(VME_TARGET) \
 $(MPLEX_TARGET) \
 $(DC_TARGET) \
 $(PP_TARGET) \
 $(VMC_TARGET)

dist: $(DISTFILES) 	
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(VME_OBJ_DIR) $(VME_DEP_DIR)
	$(RM) -r $(MPLEX_OBJ_DIR) $(MPLEX_DEP_DIR)
	$(RM) -r $(DC_OBJ_DIR) $(MDC_DEP_DIR)
	$(RM) -f $(VMC_BIN_DIR) $(MPLEX_BIN_DIR) $(VME_BIN_DIR)  
	
.PHONY: distclean
distclean: clean
	$(RM) $(VME_TARGET) $(DISTOUTPUT)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check:
	@echo no tests configured

.PHONY: help
help:
	@echo available targets: all vme vmc mplex defcomp pp dist clean distclean install uninstall check

$(VME_BIN_DIR): $(VME_OBJS)
	$(LINK.o) $^ $(LDLIBS) 

$(MPLEX_BIN_DIR): $(MPLEX_OBJS)
	$(LINK.o) $^ $(LDLIBS) 

$(DC_BIN_DIR): $(DC_OBJS)
	$(LINK.o) $^ $(LDLIBS) 

$(PP_BIN_DIR): $(PP_OBJS)
	$(LINK.o) $^ $(LDLIBS) 


$(VMC_BIN_DIR): 
	cd vmc;make -j8

#$(VMC_OBJS)
#	$(LINK.o) $^ $(LDLIBS) 

$(VME_OBJ_DIR)/%.o: %.cpp $(VME_DEP_DIR)/%.d
	$(VME_PRECOMPILE)
	@$(VME_COMPILE.cc) $<
	@$(VME_POST_COMPILE)

$(MPLEX_OBJ_DIR)/%.o: %.cpp $(MPLEX_DEP_DIR)/%.d
	$(MPLEX_PRECOMPILE)
	@$(MPLEX_COMPILE.cc)   $<
	$(MPLEX_POST_COMPILE)

$(DC_OBJ_DIR)/%.o: %.cpp $(DC_DEP_DIR)/%.d
	$(DC_PRECOMPILE)
	@$(DC_COMPILE.cc)   $<
	$(DC_POST_COMPILE)


$(PP_OBJ_DIR)/%.o: %.cpp $(PP_DEP_DIR)/%.d
	$(PP_PRECOMPILE)
	@$(PP_COMPILE.cc)   $<
	$(PP_POST_COMPILE)

$(VMC_OBJ_DIR)/%.o: %.cpp $(VMC_DEP_DIR)/%.d
	$(VMC_PRECOMPILE)
	@$(VMC_COMPILE.cc)   $<
	$(VMC_POST_COMPILE)

.PRECIOUS: $(VME_DEP_DIR)/%.d
$(VME_DEP_DIR)/%.d: ;

.PRECIOUS: $(MPLEX_DEP_DIR)/%.d
$(MPLEX_DEP_DIR)/%.d: ;

.PRECIOUS: $(DC_DEP_DIR)/%.d
$(DC_DEP_DIR)/%.d: ;

.PRECIOUS: $(PP_DEP_DIR)/%.d
$(PP_DEP_DIR)/%.d: ;

.PRECIOUS: $(VMC_DEP_DIR)/%.d
$(VMC_DEP_DIR)/%.d: ;

-include $(VME_DEPS)  
-include $(MPLEX_DEPS)  
-include $(DC_DEPS)  
-include $(PP_DEPS)  
-include $(VMC_DEPS)  
