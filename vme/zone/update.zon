/*
filename    update
password    rlscrew
changedby   Whistler
EmailAdd
request     compile
version     1
END HEADER*/
#include <macros.h>

%zone update
reset RESET_NOT
weather 1040
creators {"whistler"}

notes
"This is the update zone. Don't let any rooms point to this
zone, or use any objects from this zone without special
permission. Do not slime objects from this zone."

%dil

dilbegin disarm_pc(); /*added by darg to trip pc by npcs for fun */
var
    targ     : unitptr;
    s        : string;
    i        : integer;
code
{
  :start:
    wait(SFB_COM,self.position==POSITION_FIGHTING);
    heartbeat := PULSE_VIOLENCE;
    if (self.fighting.type != UNIT_ST_PC)
        goto start;

    i := rnd(1, 200);
    if (i <= self.abilities[ABIL_DEX])
        goto start;
  
    targ := self.fighting;
   
    secure(targ,losttarg);
    {
        block;
        if (targ==null)goto losttarg;
            exec("disarm "+targ.name,self);
        unsecure(targ);

        goto start;
    }
     goto start;

    :losttarg:
    unsecure(targ);
    goto start;
}
dilend /* End trip */



dilbegin trip_pc(); /*added by darg to trip pc by npcs for fun */

var
    targ     : unitptr;
    s        : string;
    i        : integer;
code
{
:start:

    wait(SFB_COM,self.position==POSITION_FIGHTING);
     heartbeat := PULSE_VIOLENCE;
   if (self.fighting.type != UNIT_ST_PC)goto start;
	{
    i := rnd(1, 200);
    if (i <= self.abilities[ABIL_DEX])
goto start;
    } 
   
   targ := self.fighting;
   
      secure(targ,losttarg);
     {
	  block;
	   if (targ==null)goto losttarg;
      exec("trip "+targ.name,self);
      unsecure(targ);

      goto start;
    }
     goto start;
 :losttarg:

unsecure(targ);
goto start;

}
dilend /* End trip */



dilbegin integer hit_l_num(pc:unitptr,point:integer);
code
{
    if (pc.type==UNIT_ST_PC)
    {
        if (((realtime-pc.birth)/SECS_PER_MUD_YEAR)>pc.lifespan)
            return (-1);
        return (3*point+20);
    }
    else
        return (3*point+10);
}
dilend



dilbegin integer hit_limit(pc:unitptr);
external
    integer hit_l_num(u:unitptr,i:integer);
var
    ret:integer;
code
{
    ret:=hit_l_num(pc, pc.hp);
    return(ret);
}
dilend


// NPCs only
dilbegin unique fnpri(FN_PRI_BODY) regenerate();
var
   hgain:integer;
   mgain:integer;
   egain:integer;

code
{
   self.hp := self.max_hp;
   self.endurance := self.max_endurance;
   self.mana := self.max_mana;

   :start:
   heartbeat := PULSE_POINTS;
   wait(SFB_TICK, (self.hp<self.max_hp) or (self.mana<self.max_mana) or (self.endurance<self.max_endurance));

   if (self.position >= POSITION_STUNNED)
   {
      hgain := getinteger(DIL_GINT_HITREG, self, 0);
      mgain := getinteger(DIL_GINT_MANAREG, self, 0);
      egain := 2 * getinteger(DIL_GINT_MOVEREG, self, 0);

      if ((self.mana+mgain)>self.max_mana)
         self.mana:=self.max_mana;
      else
         self.mana:=self.mana+mgain;

      if ((self.endurance+egain)>self.max_endurance)
         self.endurance:=self.max_endurance;
      else
         self.endurance:=self.endurance+egain;

      if (hgain>=0)
      {
         if ((self.hp+hgain)>self.max_hp)
            self.hp:=self.max_hp;
         else
            self.hp:=self.hp+hgain;
      }
      else
         self.hp:=self.hp+hgain;

      if (self.mana<0)
         self.mana:=0;
      if (self.endurance<0)
         self.endurance:=0;
    }
    else if (self.position==POSITION_INCAP)
    {
        self.hp:=self.hp-1;
    }
    else if (self.position==POSITION_MORTALLYW)
    {
        self.hp:=self.hp-2;
    }
    position_update(self);
    goto start;
}
dilend


// PCs only
dilbegin unique fnpri(FN_PRI_BODY-1) regen_pc();
external
    gain_cond (u:unitptr,cond:string,i:integer);
var
    hgain:integer;
    mgain:integer;
    egain:integer;
code
{
    :start:
    heartbeat:=rnd(PULSE_POINTS-PULSE_SEC*5, PULSE_POINTS+PULSE_SEC*5);

    wait (SFB_TICK,((self.hp<self.max_hp) or
        (self.mana<self.max_mana) or
        (self.endurance<self.max_endurance) or
        (self.thirst<0) or
        (self.full<0)));

    if (isset(self.flags,PC_SPIRIT))
      goto start;

  // We really need to check here if the player has a link.
  // If no link make sure the player doesn't die from starvation

    if (self.position>=POSITION_STUNNED)
    {
        hgain := getinteger(DIL_GINT_HITREG, self, 0);
        mgain := getinteger(DIL_GINT_MANAREG, self, 0);
        egain := getinteger(DIL_GINT_MOVEREG, self, 0);

        if ((self.mana+mgain)>self.max_mana)
          self.mana:=self.max_mana;
        else
          self.mana:=self.mana+mgain;
        if ((self.endurance+egain)>self.max_endurance)
          self.endurance:=self.max_endurance;
        else
          self.endurance:=self.endurance+egain;

        if (hgain>=0)
        {
            if ((self.hp+hgain)>self.max_hp)
              self.hp:=self.max_hp;
            else
              self.hp:=self.hp+hgain;
        }
        else
          self.hp:=self.hp+hgain;

        if (self.info.["watch_reg"]!=null)
        {
            log(self.name+" regained this much mana "+itoa(mgain));
            log(self.name+" reenergized this much"+itoa(egain));
            log (self.name+" Healed up this much"+itoa(hgain));
        }

        if (self.mana<0)
            self.mana:=0;
        if (self.endurance<0)
            self.endurance:=0;
    }
    else if (self.position==POSITION_INCAP)
    {
        self.hp:=self.hp-1;
    }
    else if (self.position==POSITION_MORTALLYW  )
    {
        self.hp:=self.hp-2;
    }
    position_update(self);

    gain_cond(self,"full",0);
    gain_cond(self,"thirst",0);
    goto start;
}
dilend


dilbegin gain_cond(pc:unitptr,cond:string, i:integer);
var
    dr:integer;/*drunk*/
code
{
dr:=pc.drunk;

if (pc.type!=UNIT_ST_PC)
 return;
if ((cond=="thirst") and (pc.thirst>=48))
 return;
else if (cond=="thirst")
 {
 pc.thirst:=pc.thirst+i;
 if (pc.thirst>24)
  pc.thirst:=24;
 if (pc.thirst<-96)
   pc.thirst:=-96;
 if (pc.thirst>3)
  return;
 if (pc.thirst>-4)
  sendtext("You are thirsty.<br/>",pc);
 else if (pc.thirst>-8)
 {
  sendtext("You are very thirsty.<br/>",pc);
 act("$1n is very thirsty.</div> ",A_ALWAYS, pc, null, null, TO_REST);
 }
 else if (pc.thirst>-12)
 {
  sendtext("You are dehydrated.<br/>",pc);
 act("$1n is very dehydrated.",A_ALWAYS, pc, null, null, TO_REST);
 }
 else if (pc.full>-96)
 {
 sendtext("You are dying of thirst.<br/>",pc);
 act("$1n is dying of thirst. ",A_ALWAYS, pc, null, null, TO_REST);
  }
 }
else if ((cond=="full") and (pc.full>=48))
 return;
else if (cond=="full")
 {
 pc.full:=pc.full+i;
 if (pc.full>24)
  pc.full:=24;
  if (pc.full<-96)
   pc.full:=-96;
 if (pc.full>3)
  return;
 if (pc.full>-4)
 sendtext("You are hungry.<br/>",pc);
 else if (pc.full>-8)
 {
 sendtext("You are very hungry.<br/>",pc);
 act("$1n is very hungry.",A_ALWAYS, pc, null, null, TO_REST);
 }
 else if (pc.full>-12)
 {
 sendtext("You are starving.<br/>",pc);
act("$1n is starving to death.",A_ALWAYS, pc, null, null, TO_REST);
  }
 else if (pc.full>-96)
  {
 sendtext("You are starving to death.<br/>",pc);
   act("$1n is dying of starvation.",A_ALWAYS, pc, null, null, TO_REST);
  }
 }
else if ((cond=="drunk") and (pc.drunk>=48))
 return;
else if (cond=="drunk")
    {
 pc.drunk:=pc.drunk+i;
 if ((pc.drunk<dr) and (pc.drunk==0))
  sendtext ("You sober up!<br/>",pc);
 if (pc.drunk>24)
  pc.drunk:=24;
  if (pc.drunk<0)
   pc.drunk:=0;/*you can't get any more sober than this*/
   if (pc.drunk>11)
    sendtext ("You are seeing double!<br/>",pc);
 else if (pc.drunk>7)
  sendtext("You are feeling very light headed.<br/>",pc);
 else if (pc.drunk>3)
  sendtext ("You are getting tipsy.</br>",pc);
 }
return;
}
dilend


dilbegin unique fnpri(FN_PRI_BODY+1) stomach();
external
    gain_cond(pc:unitptr,cond:string, i:integer);
var
    u:unitptr;
    bonus:integer;
code
{
    :start:
    heartbeat:=rnd((PULSE_SEC * SECS_PER_MUD_HOUR)+PULSE_SEC*60,(PULSE_SEC * SECS_PER_MUD_HOUR)+PULSE_SEC*120);
    wait (SFB_TICK,TRUE);
    u:=self;
    bonus:=0;

    while (u.type!=UNIT_ST_ROOM)
    {
        if (isset(u.flags,UNIT_FL_SACRED))
        {
            bonus:=-1;
            goto gotbonus;
        }
        u:=u.outside;
    }

    if (isset(u.flags,UNIT_FL_SACRED))
      bonus:=-1;

    :gotbonus:
    gain_cond(self,"full",-1+bonus);
    gain_cond(self,"thirst",-1+bonus);

    if (self.drunk>0)
    {
        if (self.position==POSITION_SLEEPING)
        {
            if (self.drunk>2)
                gain_cond(self,"drunk",-3+bonus);
            else if (self.drunk>1)
                gain_cond(self,"drunk",-2+bonus);
            else
                gain_cond(self,"drunk",-1+bonus);
        }
        else
            gain_cond(self,"drunk",-1+bonus);
    }

    position_update(self);
    goto start;
}
dilend


// Return the string "hp/maxhp ep/maxep mp/maxmp" to be embedded in prompt div
dilbegin string prompt_data();
var
  s : string;
code
{
  s:= "bars='" + itoa(self.hp) + "/" + itoa(self.max_hp) + " " + 
      itoa(self.endurance) + "/" + itoa(self.max_endurance) + " " + 
      itoa(self.mana) + "/" + itoa(self.max_mana) + "'";
  return(s);
}
dilend


dilbegin unique aware fnpri(FN_PRI_SYS) send_prompt();
external
   string racestring@commands (x:integer);
   string prompt_data();
   string GuildString@guilds(pc : unitptr);
var
    temp:string;
    cp:string;
    tlist:stringlist; /*temp stringlist*/
    plist:stringlist;/*prompt element list*/
    i:integer;
    ln:integer;
    sp : string;
    x:integer;
code
{
    :init:
    tlist:=split(self.prompt,"%");
    i:=1;
    ln:=length(tlist);
    while (i<ln)
    {

        if (tlist.[i] == "hp")
        {
            if (not("%hp%" in plist))
                addstring(plist, "%hp%");
            tlist.[i] := "%hp%";
        }
        else if (tlist.[i] == "maxhp")
        {
            if (not("%maxhp%" in plist))
                addstring(plist, "%maxhp%");
            tlist.[i] := "%maxhp%";
        }
        else if (tlist.[i] == "mana")
        {
            if (not("%mana%" in plist))
                addstring(plist, "%mana%");
            tlist.[i] := "%mana%";
        }
        else if (tlist.[i] == "maxmana")
        {
            if (not("%maxmana%" in plist))
                addstring(plist, "%maxmana%");
            tlist.[i] := "%maxmana%";
        }
        else if (tlist.[i] == "endurance")
        {
            if (not("%endurance%" in plist))
                addstring(plist, "%endurance%");
            tlist.[i] := "%endurance%";
        }
        else if (tlist.[i] == "maxendurance")
        {
            if (not("%maxendurance%" in plist))
                addstring(plist, "%maxendurance%");
            tlist.[i] := "%maxendurance%";
        }
        else if (tlist.[i] == "guild")
        {
            if (not("%guild%" in plist))
                addstring(plist, "%guild%");
            tlist.[i] := "%guild%";
        }
        else if (tlist.[i] == "title")
        {
            if (not("%title%" in plist))
                addstring(plist, "%title%");
            tlist.[i] := "%title%";
        }
        else if (tlist.[i] == "age")
        {
            if (not("%age%" in plist))
                addstring(plist, "%age%");
            tlist.[i] := "%age%";
        }
        else if (tlist.[i] == "race")
        {
            if (not("%race%" in plist))
                addstring(plist, "%race%");
            tlist.[i] := "%race%";
        }
        else if (tlist.[i] == "xp")
        {
            if (not("%xp%" in plist))
                addstring(plist, "%xp%");
            tlist.[i] := "%xp%";
        }
        else if (tlist.[i] == "xptolvl")
        {
            if (not("%xptolvl%" in plist))
                addstring(plist, "%xptolvl%");
            tlist.[i] := "%xptolvl%";
        }
        else if (tlist.[i] == "level")
        {
            if (not("%level%" in plist))
                addstring(plist, "%level%");
            tlist.[i] := "%level%";
        }
        else if (tlist.[i] == "vlevel")
        {
            if (not("%vlevel%" in plist))
                addstring(plist, "%vlevel%");
            tlist.[i] := "%vlevel%";
        }
        else if (tlist.[i] == "oppname")
        {
            if (not("%oppname%" in plist))
                addstring(plist, "%oppname%");
            tlist.[i] := "%oppname%";
        }
        else if (tlist.[i] == "oppdiag")
        {
            if (not("%oppdiag%" in plist))
                addstring(plist, "%oppdiag%");
            tlist.[i] := "%oppdiag%";
        }
        else if (tlist.[i] == "tankname")
        {
            if (not("%tankname%" in plist))
                addstring(plist, "%tankname%");
            tlist.[i] := "%tankname%";
        }
        else if (tlist.[i] == "tankdiag")
        {
            if (not("%tankdiag%" in plist))
                addstring(plist, "%tankdiag%");
            tlist.[i] := "%tankdiag%";
        }
        else if (tlist.[i] == "zone")
        {
            if (not("%zone%" in plist))
                addstring(plist, "%zone%");
            tlist.[i] := "%zone%";
        }
        else if (tlist.[i] == "roomname")
        {
            if (not("%roomname%" in plist))
                addstring(plist, "%roomname%");
            tlist.[i] := "%roomname%";
        }
        else if ((tlist.[i] == "room") and (self.level >= IMMORTAL_LEVEL))
        {
            if (not("%room%" in plist))
                addstring(plist, "%room%");
            tlist.[i] := "%room%";
        }
        else if ((tlist.[i] == "wizinv") and (self.level >= IMMORTAL_LEVEL))
        {
            if (not("%wizinv%" in plist))
                addstring(plist, "%wizinv%");
            tlist.[i] := "%wizinv%";
        }
        else
        {
            if (not("%er%" in plist))
                addstring(plist, "%er%");
            tlist.[i] := "%er%";
        }


        i := i + 2;
    }

/*
i:=0;
sp:="";
while(i<ln)
{
sp:=sp+tlist.[i];
i:=i+1;
}*/
  sp := self.prompt;
  ln:=length(plist);
  goto start_prompt;

:start:
   wait(SFB_PROMPT, TRUE);
   if (self.editing)
   {
      sendtext("<div class='prompt'>]</div>",self);
      goto start;
   }

:start_prompt:
   cp := sp;
   i := 0;
   while (i < ln)
   {
      if (plist.[i]== "%hp%")
         cp := replace("%hp%", itoa(self.hp), cp);
      else if (plist.[i]=="%maxhp%")
         cp:=replace("%maxhp%",itoa(self.max_hp),cp);
      else if (plist.[i]=="%mana%")
         cp:=replace("%mana%",itoa(self.mana),cp);
      else if (plist.[i]=="%maxmana%")
         cp :=replace("%maxmana%",itoa(self.max_mana),cp);
      else if (plist.[i]=="%endurance%")
         cp := replace("%endurance%",itoa(self.endurance),cp);
      else if (plist.[i]=="%maxendurance%")
         cp:=replace("%maxendurance%",itoa(self.max_endurance),cp);
      else if (plist.[i]=="%guild%")
         cp:=replace("%guild%", GuildString@guilds(self),cp);
      else if (plist.[i]=="%title%")
         cp:=replace("%title%",self.title,cp);
      else if (plist.[i]=="%age%")
         cp:=replace("%age%",itoa((realtime - self.birth) / SECS_PER_MUD_YEAR),cp);/*fuck*/
      else if (plist.[i]=="%race%")
      {
         temp:=racestring@commands(self.race);
         cp:=replace("%race%",temp,cp);
      }
      else if (plist.[i]=="%xp%")
         cp:=replace("%xp%",itoa(self.exp),cp);
      else if (plist.[i]=="%xptolvl%")
         cp:=replace("%xptolvl%",itoa(self.exptol),cp);
      else if (plist.[i]=="%vlevel%")
         cp:=replace("%vlevel%",itoa(self.vlevel),cp);
      else if (plist.[i]=="%level%")
         cp:=replace("%level%",itoa(self.level),cp);
      else if (plist.[i]=="%oppname%")
      {
         if (self.fighting !=null)
            cp:=replace("%oppname%","[Opponent: "+self.fighting.name+"]",cp);
         else
            cp:=replace("%oppname%","",cp);
      }
      else if (plist.[i]=="%tankname%")
      {
         if (self.fighting.fighting !=null)
            cp:=replace("%tankname%","[Tank: "+self.fighting.fighting.name+"]",cp);
         else
            cp:=replace("%tankname%","",cp);
      }
      else if (plist.[i]=="%oppdiag%")
      {
         if (self.fighting !=null)
         {
            x :=self.fighting.max_hp/4;
            x := self.fighting.hp/ x;
            x :=4 - x;
            if (x <= 0)
               temp:="healthy";
            else if (x==1)
               temp:="bruised";
            else if (x==2)
               temp:="scraped";
            else if (x==3)
               temp:="bleeding";
            else if (x>=4)
               temp:="gushing";

            cp:=replace("%oppdiag%","[Opponent diag:  "+temp+"]",cp);
         }
         else
            cp:=replace("%oppdiag%","",cp);
      }
      else if (plist.[i]=="%tankdiag%")
      {
         if (self.fighting.fighting !=null)
         {
            x :=self.fighting.fighting.max_hp/4;
            x := self.fighting.fighting.hp/ x;
            x :=4 - x;
            if (x <= 0)
               temp:="healthy";
            else if (x==1)
               temp:="bruised";
            else if (x==2)
               temp:="scraped";
            else if (x==3)
               temp:="bleeding";
            else if (x>=4)
               temp:="gushing";
            cp:=replace("%tankdiag%","[Tank diag:  "+temp+"]",cp);
         }
         else
            cp:=replace("%tankdiag%","",cp);
      }
      else if (plist.[i]=="%zone%")
         cp:=replace("%zone%",self.outside.zoneidx,cp);
      else if (plist.[i]=="%roomname%")
         cp:=replace("%roomname%",self.outside.title,cp);
      else if (plist.[i]=="%room%")
         cp:=replace("%room%",self.outside.nameidx,cp);
      else if (plist.[i]=="%wizinv%")
         cp:=replace("%wizinv%",itoa(self.minv),cp);
      else if (plist.[i]=="%er%")
         cp:=replace("%er%","ERROR",cp);

      i:=i+1;
   }

   if (not isset(self.pcflags,PC_COMPACT))
      sendtext("<br/>", self);
   sendtext("<div class='prompt' "+prompt_data()+">"+cp+"</div>", self);
   goto start;
}
dilend



dilbegin unique aware rebirth_prompt();
external
    string prompt_data();
code
{
  :start:
    wait(SFB_PROMPT, TRUE);
    if (self.editing)
    {
        sendtext("<div class='prompt'>]</div>",self);
        goto start;
    }

    sendtext("<div class='prompt' "+prompt_data()+">"+self.prompt+"</div>",self);
    goto start;
}
dilend
%end

